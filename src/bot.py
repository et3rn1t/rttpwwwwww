import asyncio
from aiogram import F, Bot, Dispatcher, types, exceptions
from loguru import logger
from redis.asyncio import Redis
from aiogram.filters import Command
import pytz
from datetime import datetime

from .settings import settings
from .keyboards import link_markup, Callbacks

bot = Bot(token=settings.TOKEN.get_secret_value())
dp = Dispatcher()

redis = Redis(
    host=settings.REDIS_HOST,
    port=settings.REDIS_PORT,
    password=(
        settings.REDIS_PASSWORD.get_secret_value() if settings.REDIS_PASSWORD else None
    ),
)

EX_TIME = 60 * 60 * 24 * 21

async def get_saved_user_id() -> int | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID –∏–∑ Redis"""
    try:
        user_id = await redis.get("admin_user_id")
        return int(user_id) if user_id else None
    except Exception:
        return None

async def save_user_id(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç USER_ID –≤ Redis"""
    await redis.set("admin_user_id", str(user_id), ex=EX_TIME)

async def set_message(message: types.Message):
    await redis.set(
        f"{message.chat.id}:{message.message_id}",
        message.model_dump_json(),
        ex=EX_TIME,
    )

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º USER_ID –≤ Redis
    await save_user_id(user_id)
    settings.USER_ID = user_id
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–∞\n\n"
        "üí´ *–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:*\n"
        "1. –ó–∞–π–¥–∏ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram –¥–ª—è –ë–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç-–±–æ—Ç—ã\n"
        "2. –î–æ–±–∞–≤—å –º–æ–µ–≥–æ –±–æ—Ç–∞\n"
        "3. –ü–æ—Å—Ç–∞–≤—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "üìä –¢–µ–ø–µ—Ä—å –≤—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞!",
        parse_mode="Markdown"
    )
    logger.info(f"USER_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_id}")

@dp.business_message()
async def handle_business_reply(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏—Å—á–µ–∑–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not settings.USER_ID:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    if (message.reply_to_message and 
        hasattr(message.reply_to_message, 'message_effect_id') and 
        message.reply_to_message.message_effect_id):
        
        original_message = message.reply_to_message
        user = original_message.from_user
        user_info = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
        user_info = user_info or f"ID: {user.id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—á–µ–∑–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        effect_id = original_message.message_effect_id
        effect_type = "–ò—Å—á–µ–∑–∞—é—â–µ–µ –º–µ–¥–∏–∞"
        if effect_id == "video-message":
            effect_type = "–ò—Å—á–µ–∑–∞—é—â–µ–µ –≤–∏–¥–µ–æ"
        elif effect_id == "view-once":
            effect_type = "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Ñ–æ—Ç–æ"
        elif effect_id == "view-once-v2":
            effect_type = "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞"
        elif effect_id == "view_once":
            effect_type = "–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
        elif effect_id == "once":
            effect_type = "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
        
        caption = (
            f"üëÄ *–û—Ç–≤–µ—Ç –Ω–∞ {effect_type}*\n\n"
            f"üë§ *–ê–≤—Ç–æ—Ä:*\n{user_info}\n\n"
            f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n{format_moscow_time(original_message.date)}\n\n"
            f"üí¨ *–í–∞—à –æ—Ç–≤–µ—Ç:*\n{message.text or 'üì∑ –ú–µ–¥–∏–∞'}\n\n"
            f"üé≠ *–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:* {effect_type}"
        )

        try:
            if original_message.photo:
                await bot.send_photo(
                    chat_id=settings.USER_ID,
                    photo=original_message.photo[-1].file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.video:
                await bot.send_video(
                    chat_id=settings.USER_ID,
                    video=original_message.video.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.video_note:
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
                await bot.send_video_note(
                    chat_id=settings.USER_ID,
                    video_note=original_message.video_note.file_id
                )
            elif original_message.animation:
                await bot.send_animation(
                    chat_id=settings.USER_ID,
                    animation=original_message.animation.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.document:
                await bot.send_document(
                    chat_id=settings.USER_ID,
                    document=original_message.document.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption + "\n\nüìÅ *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞*",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—á–µ–∑–∞—é—â–µ–≥–æ –º–µ–¥–∏–∞: {e}")
            fallback_text = f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {effect_type}*"
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=fallback_text,
                parse_mode="Markdown"
            )
    
    # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await set_message(message)
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def format_moscow_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)"""
    if dt:
        moscow_dt = dt.astimezone(MOSCOW_TZ)
        return moscow_dt.strftime('%H:%M:%S')
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


@dp.edited_business_message()
async def edited_message(message: types.Message):
    if not settings.USER_ID:
        logger.warning("USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
        
    model_dump = await redis.get(f"{message.chat.id}:{message.message_id}")
    await set_message(message)

    if not model_dump:
        return

    original_message = types.Message.model_validate_json(model_dump)
    if not original_message.from_user:
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = original_message.from_user
    user_info = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
    user_info = user_info or f"ID: {user.id}"
    
    caption = (
        f"‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n{user_info}\n\n"
        f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n{format_moscow_time(original_message.date)}\n\n"
        f"üïí *–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n{format_moscow_time(message.edit_date)}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    try:
        if original_message.photo:
            await bot.send_photo(
                chat_id=settings.USER_ID,
                photo=original_message.photo[-1].file_id,
                caption=caption,
                parse_mode="Markdown"
            )
        elif original_message.video:
            await bot.send_video(
                chat_id=settings.USER_ID,
                video=original_message.video.file_id,
                caption=caption,
                parse_mode="Markdown"
            )
        elif original_message.document:
            await bot.send_document(
                chat_id=settings.USER_ID,
                document=original_message.document.file_id,
                caption=caption,
                parse_mode="Markdown"
            )
        elif original_message.animation:
            await bot.send_animation(
                chat_id=settings.USER_ID,
                animation=original_message.animation.file_id,
                caption=caption,
                parse_mode="Markdown"
            )
        elif original_message.sticker:
            await bot.send_sticker(
                chat_id=settings.USER_ID,
                sticker=original_message.sticker.file_id
            )
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=caption,
                parse_mode="Markdown"
            )
        elif original_message.voice:
            await bot.send_voice(
                chat_id=settings.USER_ID,
                voice=original_message.voice.file_id,
                caption=caption,
                parse_mode="Markdown"
            )
        elif original_message.video_note:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=caption + "\n\n‚≠ï *–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫*",
                parse_mode="Markdown"
            )
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∫—Ä—É–∂–æ–∫
            await bot.send_video_note(
                chat_id=settings.USER_ID,
                video_note=original_message.video_note.file_id
            )
        elif original_message.text:
            caption += f"\n\nüí¨ *–¢–µ–∫—Å—Ç:*\n{original_message.text}"
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=caption,
                parse_mode="Markdown"
            )
        elif original_message.caption:
            caption += f"\n\nüí¨ *–ü–æ–¥–ø–∏—Å—å:*\n{original_message.caption}"
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=caption,
                parse_mode="Markdown"
            )
        else:
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=caption + "\n\nüìÅ *–¢–∏–ø:* –ú–µ–¥–∏–∞—Ñ–∞–π–ª",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        fallback_text = caption + "\n\n‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª*"
        await bot.send_message(
            chat_id=settings.USER_ID,
            text=fallback_text,
            parse_mode="Markdown"
        )

@dp.deleted_business_messages()
async def deleted_message(business_messages: types.BusinessMessagesDeleted):
    if not settings.USER_ID:
        logger.warning("USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.")
        return
        
    pipe = redis.pipeline()
    for message_id in business_messages.message_ids:
        pipe.get(f"{business_messages.chat.id}:{message_id}")
    messages_data = await pipe.execute()

    keys_to_delete = []
    for message_id, model_dump in zip(business_messages.message_ids, messages_data):
        if not model_dump:
            continue

        original_message = types.Message.model_validate_json(model_dump)
        if not original_message.from_user:
            continue

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = original_message.from_user
        user_info = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
        user_info = user_info or f"ID: {user.id}"
        
        caption = (
            f"üóëÔ∏è *–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n{user_info}\n\n"
            f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n{format_moscow_time(original_message.date)}\n\n"
            f"üïí *–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:*\n{format_moscow_time(datetime.now())}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        try:
            if original_message.photo:
                await bot.send_photo(
                    chat_id=settings.USER_ID,
                    photo=original_message.photo[-1].file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.video:
                await bot.send_video(
                    chat_id=settings.USER_ID,
                    video=original_message.video.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.document:
                await bot.send_document(
                    chat_id=settings.USER_ID,
                    document=original_message.document.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.animation:
                await bot.send_animation(
                    chat_id=settings.USER_ID,
                    animation=original_message.animation.file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif original_message.sticker:
                await bot.send_sticker(
                    chat_id=settings.USER_ID,
                    sticker=original_message.sticker.file_id
                )
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
            elif original_message.voice:
                # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                caption += f"\n\nüé§ *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {original_message.voice.duration} —Å–µ–∫.)"
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
            elif original_message.video_note:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption + "\n\n‚≠ï *–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫*",
                    parse_mode="Markdown"
                )
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∫—Ä—É–∂–æ–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
                await bot.send_video(
                    chat_id=settings.USER_ID,
                    video=original_message.video_note.file_id
                )
            elif original_message.text:
                caption += f"\n\nüí¨ *–¢–µ–∫—Å—Ç:*\n{original_message.text}"
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
            elif original_message.caption:
                caption += f"\n\nüí¨ *–ü–æ–¥–ø–∏—Å—å:*\n{original_message.caption}"
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    chat_id=settings.USER_ID,
                    text=caption + "\n\nüìÅ *–¢–∏–ø:* –ú–µ–¥–∏–∞—Ñ–∞–π–ª",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            fallback_text = caption + "\n\n‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª*"
            await bot.send_message(
                chat_id=settings.USER_ID,
                text=fallback_text,
                parse_mode="Markdown"
            )
        finally:
            await asyncio.sleep(0.1)

        keys_to_delete.append(f"{business_messages.chat.id}:{message_id}")

    if keys_to_delete:
        await redis.delete(*keys_to_delete)

@dp.callback_query(F.data == Callbacks.EMPTY)
async def empty(query: types.CallbackQuery):
    await query.answer()

@dp.callback_query(F.data == Callbacks.CLOSE)
async def close(query: types.CallbackQuery):
    await query.answer()
    if isinstance(query.message, types.Message):
        await query.message.delete()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        await redis.ping()
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID
        saved_user_id = await get_saved_user_id()
        if saved_user_id:
            settings.USER_ID = saved_user_id
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID: {saved_user_id}")
        else:
            logger.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø–æ–ª–ª–∏–Ω–≥")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())